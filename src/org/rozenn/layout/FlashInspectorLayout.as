/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.rozenn.layout{    import flash.events.StatusEvent;    import flash.net.LocalConnection;    import flash.xml.XMLNode;    import org.rozenn.Level;    import org.rozenn.LogRecord;    import org.rozenn.formatter.IFormatter;    /**     * The <code>FlashInspectorLayout</code> class provides a convenient way to output log messages through FlashInspector console.     *      * @author Alexis Couronne     * @author Francis Bourre (LowRa)     */    public class FlashInspectorLayout extends AbstractLayout    {        /**         * @private         */        private var localConnection : LocalConnection;        /**         * @private         */        private var connectionName : String = "_luminicbox_log_console";        /**         * @private         */        private var method : String = "log";        /**         * @private         */        private var id : String;        /**         * @private         */        private var collapseDepth : Number = 20 ;        /**         * Build an <code>FlashInspectorLayout</code> instance.         *          * @param formatter The default formatter for this layout. If <code>null</code> is passed <code>SimpleFormatter</code> is used.         * @param minLevel	The min level listen by this layout. If <code>null</code> is passed <code>Level.ALL</code> is used.         * @param maxLevel	The max level listen by this layout. If <code>null</code> is passed <code>Level.FATAL</code> is used.         * @throws 	<code>org.skitools.exception.IllegalStateException</code> if passed-in min level is superior than max level.         */        public function FlashInspectorLayout(formatter : IFormatter = null, minLevel : Level = null, maxLevel : Level = null)        {            super(formatter, minLevel, maxLevel);            localConnection = new LocalConnection();            localConnection.addEventListener(StatusEvent.STATUS, onStatus);            id = String(( new Date()).getTime());        }        /**         * This method is called if level <code>LogRecord</code> is between min and max level         * This method send <code>LogRecord</code> informations to FlashInspectorLayout         *          * @param logRecord informations of log message.         */        override protected function send(logRecord : LogRecord) : void        {            var obj : Object = {loggerId:id, levelName:logRecord.getLevel().getName(), time:logRecord.getDate(), version:0.15, argument:_serializeObj(getFormatter(logRecord).format(logRecord), 1)};            localConnection.send(connectionName, method, obj);        }        /**         * @private         */        private function onStatus(event : StatusEvent) : void        {            trace("onStatus( " + event + ")");        }        /**         * Original code from Pablo Costantini // LuminicBox.Log.ConsolePublisher          *          * @private         */        private function _serializeObj(o : *, depth : Number) : Object        {            var type : TypeObject = _getType(o);            var sValue : Object;            var sReachLimit : Boolean = false;            if (!type.inspectable)            {                sValue = o;            }            else if (type.stringify)            {                sValue = o + "";            }            else            {                if (depth <= collapseDepth)                {                    var items : Array = new Array();                    if (o is Array)                    {                        for (var pos : Number = 0;pos < (o as Array).length; pos++) items.push({property:pos, value:_serializeObj(o[pos], (depth + 1))});                    }                    else                    {                        for (var prop:String in o) items.push({property:prop, value:_serializeObj(o[prop], (depth + 1))});                    }                    sValue = items;                }                else                {                    sReachLimit = true;                }            }            return {value:sValue, reachLimit:sReachLimit, type:type.name};        }        /**         * @private         */        private function _getType(o : *) : TypeObject        {            var typeOf : * = typeof(o);            var type : TypeObject = new TypeObject();            type.stringify = false;            type.inspectable = true;            type.name = typeOf;            if (typeOf == "string" || typeOf == "boolean" || typeOf == "number" || typeOf == "int" || typeOf == "uint" || typeOf == "float" || typeOf == "undefined" || typeOf == "null")            {                type.inspectable = false;            }            else if (o is Date)            {                // DATE                type.inspectable = false;                type.name = "date";            }            else if (o is Array)            {                // ARRAY                type.name = "array";            }            else if (o is XML)            {                // XML                type.name = "xml";                type.stringify = true;            }            else if (o is XMLNode)            {                // XML node                type.name = "xmlnode";                type.stringify = true;            }            return type;        }    }}internal class TypeObject{    public var name : String;    public var stringify : Boolean;    public var inspectable : Boolean;}