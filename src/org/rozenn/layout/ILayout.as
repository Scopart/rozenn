/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.rozenn.layout{    import org.rozenn.Level;    import org.rozenn.LogRecord;    import org.rozenn.formatter.IFormatter;    /**     * <code>ILayout</code> define the layout structure.     * A layout is a write output for the logging system.     *      * @author Alexis Couronne     */    public interface ILayout    {        /**         * Returns <code>IFormatter</code> for passed-in <code>LogRecord</code>.         * If logrecord have not formatter, the layout default formatter is returned         *          * @return an <code>IFormatter</code> object associated to passed-in <code>LogRecord</code>.         */        function getFormatter(logRecord : LogRecord) : IFormatter;        /**         * Returns the default <code>IFormatter</code>.         *          * @return the default <code>IFormatter</code>.         */        function getDefaultFormatter() : IFormatter;        /**         * Define the default formatter for this layout         * If <code>null</code> is passed <code>SimpleFormatter</code> is used.         *          * @param formatter The default formatter for this layout         */        function setFormatter(formatter : IFormatter) : void;        /**         * Called by logging system when log message is emitted.         *          * @param logRecord informations of log message.         */        function handle(logRecord : LogRecord) : void;        /**         * Defines the min <code>Level</code> listen by this layout.         * If layout receive <code>LogRecord</code> with <code>Level</code> inferior than minLevel, this <code>LogRecord</code> will not print.         *          * @param minLevel the min level listen by this layout.         * @throws 	<code>IllegalOperationError</code> - if passed-in max level is inferior than min level.         */        function setMinLevel(minLevel : Level) : void;        /**         * Defines the max <code>Level</code> listen by this layout.         * If layout receive <code>LogRecord</code> with <code>Level</code> superior than maxLevel, this <code>LogRecord</code> will not print.         *          * @param maxLevel the max level listen by this layout.         * @throws 	<code>IllegalOperationError</code> - if passed-in max level is inferior than min level.         */        function setMaxLevel(maxLevel : Level) : void;        /**         * Returns the min <code>Level</code> for this layout.         *          * @return the min <code>Level</code> for this layout.         */        function getMinLevel() : Level;        /**         * Returns the max <code>Level</code> for this layout.         *          * @return the max <code>Level</code> for this layout.         */        function getMaxLevel() : Level;    }}