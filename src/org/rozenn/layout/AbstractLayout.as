/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.rozenn.layout{    import flash.errors.IllegalOperationError;    import org.rozenn.Level;    import org.rozenn.LogRecord;    import org.rozenn.formatter.IFormatter;    import org.rozenn.formatter.SimpleFormatter;    /**     * <code>AbstractLayout</code> is an abstract defenition of <code>ILayout</code>.     * This class must be extend.     *      * @see org.skitools.logger.layout.ILayout     * @author Alexis Couronne     */    public class AbstractLayout implements ILayout    {        /**         * The default formatter for this layout         */        protected var formatter : IFormatter;        /**         * The min level listen by this layout         */        protected var minLevel : Level;        /**         * The max level listen by this layout         */        protected var maxLevel : Level;        /**         * Build an <code>AbstractLayout</code> instance.         *          * @param formatter The default formatter for this layout. If <code>null</code> is passed <code>SimpleFormatter</code> is used.         * @param minLevel	The min level listen by this layout. If <code>null</code> is passed <code>Level.ALL</code> is used.         * @param maxLevel	The max level listen by this layout. If <code>null</code> is passed <code>Level.FATAL</code> is used.         * @throws 	<code>org.skitools.exception.IllegalStateException</code> if passed-in min level is superior than max level.         */        public function AbstractLayout(formatter : IFormatter = null, minLevel : Level = null, maxLevel : Level = null)        {            setFormatter(formatter);            setMinLevel(minLevel);            setMaxLevel(maxLevel);        }        /**         * This method is called if level <code>LogRecord</code> is between min and max level         * This method must be overrided in concrete class.         *          * @param logRecord informations of log message.         */        protected function send(logRecord : LogRecord) : void        {                    }        /**         * @inheritDoc         */        public function getFormatter(logRecord : LogRecord) : IFormatter        {            return logRecord.getFormatter() || formatter;        }        /**         * @inheritDoc         */        public function getDefaultFormatter() : IFormatter        {            return formatter;        }        /**         * @inheritDoc         */        public function setFormatter(formatter : IFormatter) : void        {            this.formatter = formatter == null ? new SimpleFormatter() : formatter;        }        /**         * @inheritDoc         */        public function handle(logRecord : LogRecord) : void        {            if (logRecord.getLevel().getID() >= minLevel.getID() && logRecord.getLevel().getID() <= maxLevel.getID())                send(logRecord);        }        /**         * @inheritDoc         */        public function setMinLevel(minLevel : Level) : void        {            this.minLevel = minLevel == null ? Level.ALL : minLevel;            checkLevels();        }        /**         * @inheritDoc         */        public function setMaxLevel(maxLevel : Level) : void        {            this.maxLevel = maxLevel == null ? Level.FATAL : maxLevel;            checkLevels();        }        /**         * @inheritDoc         */        public function getMinLevel() : Level        {            return minLevel;        }        /**         * @inheritDoc         */        public function getMaxLevel() : Level        {            return maxLevel;        }        /**         * @private         */        private function checkLevels() : void        {            if (minLevel && maxLevel)            {                if (minLevel.getID() > maxLevel.getID())                	throw new IllegalOperationError("Min level cannot be superior than max level");            }        }    }}