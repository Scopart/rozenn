/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.rozenn{    import flash.errors.IllegalOperationError;    import org.rozenn.layout.ILayout;    /**     * This class is the core of logging system. It dispatch to layouts      * <code>LogRecord</code> emit by <code>Logger</code> objects.     * This class is a singleton. Use <code>getInstance</code> to get an instance of this class.     *      * @author Alexis Couronne     */    public class Logging    {        /**         * @private         */        private static var instance : Logging;        /**         * @private         */        private var _layouts : Vector.<ILayout>;        /**         * @private         */        private var currentLayout : ILayout;        /**         * Returns the singleton instance of the <code>Logging</code>.         *          * @return the singleton instance of the <code>Logging</code>         */        public static function getInstance() : Logging        {            if ( instance == null )            {                instance = new Logging(new PrivateAccess());            }            return instance;        }        /**         * Creates a new <code>Logging</code> instance.         * This constructor is locked. You cannot call the constructor directly.         * Please use <code>Logging.getInstance()</code> to retreive the singleton instance.         *          * @param 	access	a lock for direct instanciation of the <code>Logging</code> class.         * @throws 	<code>IllegalOperationError</code> - if <code>access</code> parameter is null.         */        public function Logging(access : PrivateAccess)        {            if (access == null)            {                throw new IllegalOperationError("Logging is a Singleton. You must use Logging.getInstance()");            }            _layouts = new Vector.<ILayout>();        }        /**         * Add passed-in layout to the logging system.         *          * @param layout the layout to add.         */        public function addLayout(layout : ILayout) : void        {            if (_layouts.indexOf(layout) == -1)                _layouts.push(layout);        }        /**         * Remove passed-in layout from logging system         *          * @param layout the layout to remove.         */        public function removeLayout(layout : ILayout) : void        {            var index : int = _layouts.indexOf(layout);            if ( index != -1 )            {                _layouts.splice(index, 1);            }        }        /**         * Remove all layouts from logging system         */        public function removeAllLayouts() : void        {            _layouts = new Vector.<ILayout>();        }        /**         * Indicates if Logging has layout.         *          * @return <code>true</code> if Logging has layout.          */        public function hasLayout() : Boolean        {            return (_layouts.length > 0);        }        /**         * Indicates the layout number registered.         *          * @return the number of layout registered.         */        public function get numLayouts() : uint        {            return _layouts.length;        }        /**         * @internal         */        internal function log(logRecord : LogRecord) : void        {            for each (currentLayout in _layouts)            {                currentLayout.handle(logRecord);            }        }        /**         * @internal         */        internal function getLayout(index : int) : ILayout        {            return _layouts[index];        }    }}internal class PrivateAccess{}